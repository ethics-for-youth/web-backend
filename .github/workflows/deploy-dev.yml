name: Deploy to Dev Environment

on:
  workflow_dispatch:
    inputs:
      skip_approval:
        description: 'Skip approval step (for testing only)'
        required: false
        default: false
        type: boolean
      force_deploy:
        description: 'Force deployment even if no changes detected'
        required: false
        default: false
        type: boolean
  push:
    branches: [ develop ]
    paths:
      - 'terraform/**'
      - 'lambda_functions/**'
      - 'layers/**'
      - 'scripts/**'
      - '.github/workflows/terraform-plan.yml'
      - '.github/workflows/terraform-validate.yml'
      - '.github/workflows/terraform-deploy.yml'
      - '.github/workflows/deploy-dev.yml'

permissions:
  contents: read
  pull-requests: write
  issues: write

env:
  AWS_REGION: ${{ vars.AWS_REGION }}

jobs:
  validate:
    uses: ./.github/workflows/terraform-validate.yml
    with:
      aws-region: ${{ vars.AWS_REGION }}
    secrets:
      aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
      aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

  plan:
    uses: ./.github/workflows/terraform-plan.yml
    needs: validate
    with:
      environment: dev
      aws-region: ${{ vars.AWS_REGION }}
    secrets:
      aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
      aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

  wait-for-approval:
    name: Wait for Dev Deployment Approval
    runs-on: ubuntu-latest
    needs: [validate, plan]
    # if: ${{ !github.event.inputs.skip_approval }}
    outputs:
      approved: ${{ steps.approval.outputs.approved }}
    steps:
    - name: Wait for approval
      id: approval
      uses: trstringer/manual-approval@v1
      with:
        secret: ${{ secrets.GITHUB_TOKEN }}
        approvers: ${{ github.actor }}
        minimum-approvals: 1
        exclude-workflow-initiator-as-approver: false

  deploy:
    name: Deploy to Dev
    uses: ./.github/workflows/terraform-deploy.yml
    needs: [validate, plan, wait-for-approval]
    with:
      environment: dev
      aws-region: ${{ vars.AWS_REGION }}
      plan-file: ${{ needs.plan.outputs.plan-file }}
    secrets:
      aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
      aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }} 
