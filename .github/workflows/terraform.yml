name: Terraform Validation and Planning

on:
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'terraform/**'
      - 'lambda_functions/**'
      - 'layers/**'
      - 'scripts/**'
      - '.github/workflows/terraform.yml'
      - '.github/workflows/terraform-deploy.yml'
      - '.github/workflows/terraform-plan.yml'
      - '.github/workflows/terraform-validate.yml'
      - '.github/workflows/deploy-*.yml'

permissions:
  contents: read
  pull-requests: write
  issues: write

env:
  AWS_REGION: ${{ vars.AWS_REGION }}
  CI: true

jobs:
  validate:
    name: Validate Terraform
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: "1.5.0"
        
    - name: Configure AWS credentials (optional for validation)
      uses: aws-actions/configure-aws-credentials@v4
      continue-on-error: true
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Make scripts executable
      run: |
        chmod +x scripts/build.sh
        chmod +x terraform/workspace.sh
        chmod +x terraform/backend-setup/workspace.sh
        
    - name: Validate Terraform configuration
      run: ./scripts/build.sh validate

  plan-dev:
    name: Plan Dev Environment
    runs-on: ubuntu-latest
    needs: validate
    if: github.base_ref == 'develop'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: "1.5.0"
        
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Make scripts executable
      run: |
        chmod +x scripts/build.sh
        chmod +x terraform/workspace.sh
        chmod +x terraform/backend-setup/workspace.sh
        
    - name: Plan Terraform changes for dev
      id: plan-dev
      run: |
        set -e
        ./scripts/build.sh plan dev 2>&1 | tee plan_output.txt
        # Capture the plan output for commenting
        echo "PLAN_OUTPUT<<EOF" >> $GITHUB_ENV
        cat plan_output.txt >> $GITHUB_ENV
        echo "EOF" >> $GITHUB_ENV
      continue-on-error: true
      
    - name: Comment PR with plan
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const planOutput = process.env.PLAN_OUTPUT || 'No changes. Infrastructure is up-to-date.';
          // Remove ANSI color codes and escape sequences
          const cleanOutput = planOutput.replace(/\u001b\[[0-9;]*m/g, '');
          
          // Truncate if too long for GitHub comment
          const maxLength = 60000;
          const truncatedOutput = cleanOutput.length > maxLength 
            ? cleanOutput.substring(0, maxLength) + '\n\n... (output truncated)' 
            : cleanOutput;
            
          const output = `#### Terraform Plan for Dev Environment ðŸ“‹
          
          \`\`\`
          ${truncatedOutput}
          \`\`\`
          
          *This plan was generated automatically for the dev environment.*`;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          })

  plan-qa:
    name: Plan QA Environment
    runs-on: ubuntu-latest
    needs: validate
    if: github.base_ref == 'main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: "1.5.0"
        
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Make scripts executable
      run: |
        chmod +x scripts/build.sh
        chmod +x terraform/workspace.sh
        chmod +x terraform/backend-setup/workspace.sh
        
    - name: Plan Terraform changes for qa
      id: plan-qa
      run: |
        set -e
        ./scripts/build.sh plan qa 2>&1 | tee plan_output.txt
        # Capture the plan output for commenting
        echo "PLAN_OUTPUT<<EOF" >> $GITHUB_ENV
        cat plan_output.txt >> $GITHUB_ENV
        echo "EOF" >> $GITHUB_ENV
      continue-on-error: true
      
    - name: Comment PR with plan
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const planOutput = process.env.PLAN_OUTPUT || 'No changes. Infrastructure is up-to-date.';
          // Remove ANSI color codes and escape sequences
          const cleanOutput = planOutput.replace(/\u001b\[[0-9;]*m/g, '');
          
          // Truncate if too long for GitHub comment
          const maxLength = 60000;
          const truncatedOutput = cleanOutput.length > maxLength 
            ? cleanOutput.substring(0, maxLength) + '\n\n... (output truncated)' 
            : cleanOutput;
            
          const output = `#### Terraform Plan for QA Environment ðŸ“‹
          
          \`\`\`
          ${truncatedOutput}
          \`\`\`
          
          *This plan was generated automatically for the qa environment.*`;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          })

  plan-prod:
    name: Plan Production Environment
    runs-on: ubuntu-latest
    needs: validate
    if: github.base_ref == 'main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: "1.5.0"
        
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Make scripts executable
      run: |
        chmod +x scripts/build.sh
        chmod +x terraform/workspace.sh
        chmod +x terraform/backend-setup/workspace.sh
        
    - name: Plan Terraform changes for prod
      id: plan-prod
      run: ./scripts/build.sh plan prod
      
    - name: Comment PR with plan
      uses: actions/github-script@v7
      with:
        script: |
          const planOutput = process.env.PLAN_OUTPUT || 'No changes. Infrastructure is up-to-date.';
          // Remove ANSI color codes and escape sequences
          const cleanOutput = planOutput.replace(/\u001b\[[0-9;]*m/g, '');
          const output = `#### Terraform Plan for Production Environment ðŸ“‹
          
          \`\`\`
          ${cleanOutput}
          \`\`\`
          
          *This plan was generated automatically for the production environment.*`;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          })
      env:
        PLAN_OUTPUT: ${{ steps.plan-prod.outputs.stdout }} 