name: Terraform Validation and Planning

on:
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'terraform/**'
      - 'lambda_functions/**'
      - 'layers/**'
      - 'scripts/**'
      - '.github/workflows/terraform.yml'
      - '.github/workflows/terraform-deploy.yml'
      - '.github/workflows/terraform-plan.yml'
      - '.github/workflows/terraform-validate.yml'
      - '.github/workflows/deploy-*.yml'

permissions:
  contents: read
  pull-requests: write
  issues: write

env:
  AWS_REGION: ${{ vars.AWS_REGION }}
  CI: true

jobs:
  validate:
    name: Validate Terraform
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: |
          package-lock.json
          layers/dependencies/nodejs/package-lock.json
          layers/utility/nodejs/package-lock.json
        
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: "1.12.2"
        
    - name: Configure AWS credentials (optional for validation)
      uses: aws-actions/configure-aws-credentials@v4
      continue-on-error: true
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Make scripts executable
      run: |
        chmod +x scripts/build.sh
        
    - name: Validate Terraform configuration
      run: ./scripts/build.sh validate

  plan-dev:
    uses: ./.github/workflows/terraform-plan.yml
    needs: validate
    if: github.base_ref == 'develop'
    with:
      environment: dev
      aws-region: ${{ vars.AWS_REGION }}
    secrets:
      aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
      aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

  comment-plan:
    name: Comment PR with Plan Link
    runs-on: ubuntu-latest
    needs: [validate, plan-dev]
    if: github.event_name == 'pull_request' && github.base_ref == 'develop'
    
    steps:
    - name: Comment PR with plan link
      uses: actions/github-script@v7
      with:
        script: |
          const runUrl = `${context.payload.repository.html_url}/actions/runs/${context.runId}`;
          const output = `#### üîç Terraform Plan for Dev Environment
          
          The Terraform plan has been generated! You can view the full plan details here:
          
          **[üìã View Terraform Plan Results](${runUrl})**
          
          This includes:
          - üìä Resource changes summary
          - üîß Infrastructure modifications  
          - ‚ö†Ô∏è Any warnings or errors
          
          *Click the link above to see the complete plan output in the workflow logs.*`;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          })

  plan-qa:
    uses: ./.github/workflows/terraform-plan.yml
    needs: validate
    if: github.base_ref == 'main'
    with:
      environment: qa
      aws-region: ${{ vars.AWS_REGION }}
    secrets:
      aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
      aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

  comment-plan-qa:
    name: Comment PR with QA Plan Link
    runs-on: ubuntu-latest
    needs: [validate, plan-qa]
    if: github.event_name == 'pull_request' && github.base_ref == 'main'
    
    steps:
    - name: Comment PR with plan link
      uses: actions/github-script@v7
      with:
        script: |
          const runUrl = `${context.payload.repository.html_url}/actions/runs/${context.runId}`;
          const output = `#### üîç Terraform Plan for QA Environment
          
          The Terraform plan has been generated! You can view the full plan details here:
          
          **[üìã View Terraform Plan Results](${runUrl})**
          
          This includes:
          - üìä Resource changes summary
          - üîß Infrastructure modifications  
          - ‚ö†Ô∏è Any warnings or errors
          
          *Click the link above to see the complete plan output in the workflow logs.*`;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          })

  plan-prod:
    uses: ./.github/workflows/terraform-plan.yml
    needs: validate
    if: github.base_ref == 'main'
    with:
      environment: prod
      aws-region: ${{ vars.AWS_REGION }}
    secrets:
      aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
      aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

  comment-plan-prod:
    name: Comment PR with Prod Plan Link
    runs-on: ubuntu-latest
    needs: [validate, plan-prod]
    if: github.event_name == 'pull_request' && github.base_ref == 'main'
    
    steps:
    - name: Comment PR with plan link
      uses: actions/github-script@v7
      with:
        script: |
          const runUrl = `${context.payload.repository.html_url}/actions/runs/${context.runId}`;
          const output = `#### üîç Terraform Plan for Production Environment
          
          The Terraform plan has been generated! You can view the full plan details here:
          
          **[üìã View Terraform Plan Results](${runUrl})**
          
          This includes:
          - üìä Resource changes summary
          - üîß Infrastructure modifications  
          - ‚ö†Ô∏è Any warnings or errors
          
          *Click the link above to see the complete plan output in the workflow logs.*`;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          }) 