name: Terraform Deployment

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'terraform/**'
      - 'lambda_functions/**'
      - 'layers/**'
      - 'scripts/**'
      - '.github/workflows/terraform.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'terraform/**'
      - 'lambda_functions/**'
      - 'layers/**'
      - 'scripts/**'
      - '.github/workflows/terraform.yml'

env:
  AWS_REGION: ap-south-1
  TF_VERSION: "1.5.0"

jobs:
  validate:
    name: Validate Terraform
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}
        
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Make build script executable
      run: chmod +x scripts/build.sh
      
    - name: Validate Terraform configuration
      run: ./scripts/build.sh validate

  plan-dev:
    name: Plan Dev Environment
    runs-on: ubuntu-latest
    needs: validate
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}
        
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Make build script executable
      run: chmod +x scripts/build.sh
      
    - name: Build Lambda layers
      run: ./scripts/build.sh build-layers
      
    - name: Plan Terraform changes for dev
      run: ./scripts/build.sh plan dev
      
    - name: Comment PR with plan
      uses: actions/github-script@v7
      if: github.event_name == 'pull_request'
      with:
        script: |
          const output = `#### Terraform Plan for Dev Environment ðŸ“‹
          \`\`\`\n
          ${process.env.PLAN_OUTPUT || 'No changes. Infrastructure is up-to-date.'}
          \`\`\`
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          })
      env:
        PLAN_OUTPUT: ${{ steps.plan.outputs.stdout }}

  deploy-dev:
    name: Deploy to Dev
    runs-on: ubuntu-latest
    needs: validate
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    environment: dev
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}
        
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Make build script executable
      run: chmod +x scripts/build.sh
      
    - name: Deploy to dev environment
      run: ./scripts/build.sh deploy dev
      
    - name: Get deployment outputs
      run: |
        cd terraform
        ./workspace.sh show
        terraform output
      id: outputs

  deploy-qa:
    name: Deploy to QA
    runs-on: ubuntu-latest
    needs: validate
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: qa
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}
        
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Make build script executable
      run: chmod +x scripts/build.sh
      
    - name: Deploy to qa environment
      run: ./scripts/build.sh deploy qa
      
    - name: Get deployment outputs
      run: |
        cd terraform
        ./workspace.sh show
        terraform output
      id: outputs

  deploy-prod:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: validate
    if: github.ref == 'refs/heads/main' && github.event_name == 'push' && contains(github.event.head_commit.message, '[deploy-prod]')
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}
        
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Make build script executable
      run: chmod +x scripts/build.sh
      
    - name: Deploy to production environment
      run: ./scripts/build.sh deploy prod
      
    - name: Get deployment outputs
      run: |
        cd terraform
        ./workspace.sh show
        terraform output
      id: outputs 